{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { ADD_TO_CART, REMOVE_ITEM, SUB_QUANTITY, ADD_QUANTITY, ADD_SHIPPING, ADD_QUANTITY_WITH_NUMBER, RESET_CART } from '../actions/action-types/cart-actions';\nconst initState = {\n  products: [{\n    id: 1,\n    title: \"Novel Bunch\",\n    price: 455.50,\n    image: require(\"../../images/shop/item1.jpg\"),\n    imageHover: require(\"../../images/shop/item1-hover.jpg\")\n  }, {\n    id: 2,\n    title: \"Book Chicks\",\n    price: 541.50,\n    image: require(\"../../images/shop/item2.jpg\"),\n    imageHover: require(\"../../images/shop/item2-hover.jpg\")\n  }, {\n    id: 3,\n    title: \"Book Divas\",\n    price: 140.50,\n    image: require(\"../../images/shop/item3.jpg\"),\n    imageHover: require(\"../../images/shop/item3-hover.jpg\")\n  }, {\n    id: 4,\n    title: \"Book Smart\",\n    price: 600.00,\n    image: require(\"../../images/shop/item4.jpg\"),\n    imageHover: require(\"../../images/shop/item4-hover.jpg\")\n  }, {\n    id: 5,\n    title: \"Book Broads\",\n    price: 655.50,\n    image: require(\"../../images/shop/item5.jpg\"),\n    imageHover: require(\"../../images/shop/item5-hover.jpg\")\n  }, {\n    id: 6,\n    title: \"Page Turners\",\n    price: 415.00,\n    image: require(\"../../images/shop/item6.jpg\"),\n    imageHover: require(\"../../images/shop/item6-hover.jpg\")\n  }],\n  addedItems: [],\n  total: 0,\n  shipping: 0\n};\n\nconst cartReducer = (state = initState, action) => {\n  if (action.type === ADD_TO_CART) {\n    let addedItem = state.products.find(item => item.id === action.id); //check if the action id exists in the addedItems\n\n    let existed_item = state.addedItems.find(item => action.id === item.id);\n\n    if (existed_item) {\n      addedItem.quantity += 1;\n      return _objectSpread({}, state, {\n        total: state.total + addedItem.price\n      });\n    } else {\n      addedItem.quantity = 1; //calculating the total\n\n      let newTotal = state.total + addedItem.price;\n      return _objectSpread({}, state, {\n        addedItems: [...state.addedItems, addedItem],\n        total: newTotal\n      });\n    }\n  }\n\n  if (action.type === ADD_QUANTITY_WITH_NUMBER) {\n    let addedItem = state.products.find(item => item.id === action.id); //check if the action id exists in the addedItems\n\n    let existed_item = state.addedItems.find(item => action.id === item.id);\n\n    if (existed_item) {\n      addedItem.quantity += action.qty;\n      return _objectSpread({}, state, {\n        total: state.total + addedItem.price * action.qty\n      });\n    } else {\n      addedItem.quantity = action.qty; //calculating the total\n\n      let newTotal = state.total + addedItem.price * action.qty;\n      return _objectSpread({}, state, {\n        addedItems: [...state.addedItems, addedItem],\n        total: newTotal\n      });\n    }\n  }\n\n  if (action.type === REMOVE_ITEM) {\n    let itemToRemove = state.addedItems.find(item => action.id === item.id);\n    let new_items = state.addedItems.filter(item => action.id !== item.id); //calculating the total\n\n    let newTotal = state.total - itemToRemove.price * itemToRemove.quantity;\n    return _objectSpread({}, state, {\n      addedItems: new_items,\n      total: newTotal\n    });\n  }\n\n  if (action.type === ADD_QUANTITY) {\n    let addedItem = state.products.find(item => item.id === action.id);\n    addedItem.quantity += 1;\n    let newTotal = state.total + addedItem.price;\n    return _objectSpread({}, state, {\n      total: newTotal\n    });\n  }\n\n  if (action.type === SUB_QUANTITY) {\n    let addedItem = state.products.find(item => item.id === action.id); //if the qt == 0 then it should be removed\n\n    if (addedItem.quantity === 1) {\n      let new_items = state.addedItems.filter(item => item.id !== action.id);\n      let newTotal = state.total - addedItem.price;\n      return _objectSpread({}, state, {\n        addedItems: new_items,\n        total: newTotal\n      });\n    } else {\n      addedItem.quantity -= 1;\n      let newTotal = state.total - addedItem.price;\n      return _objectSpread({}, state, {\n        total: newTotal\n      });\n    }\n  }\n\n  if (action.type === ADD_SHIPPING) {\n    return _objectSpread({}, state, {\n      shipping: state.shipping += 6\n    });\n  }\n\n  if (action.type === 'SUB_SHIPPING') {\n    return _objectSpread({}, state, {\n      shipping: state.shipping -= 6\n    });\n  }\n\n  if (action.type === RESET_CART) {\n    return _objectSpread({}, state, {\n      addedItems: [],\n      total: 0,\n      shipping: 0\n    });\n  } else {\n    return state;\n  }\n};\n\nexport const initStore = (initialState = initState) => {\n  return createStore(cartReducer, initialState, composeWithDevTools(applyMiddleware()));\n};","map":null,"metadata":{},"sourceType":"module"}